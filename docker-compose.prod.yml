version: '3.8'

services:
  # Base de dades PostgreSQL per producció
  postgres:
    image: postgres:15-alpine
    container_name: dashboard-postgres-prod
    environment:
      POSTGRES_DB: ${DB_NAME:-dashboard_assoliments}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "127.0.0.1:5432:5432"  # Només accessible localment
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - dashboard-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Migració de base de dades (executa una vegada)
  migrate:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: dashboard-migrate-prod
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-dashboard_assoliments}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dashboard-network-prod
    command: ["node", "scripts/docker-migrate.js"]
    restart: "no"

  # Aplicació Node.js per producció
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: dashboard-app-prod
    environment:
      NODE_ENV: production
      PORT: ${PORT:-3000}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-dashboard_assoliments}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
    ports:
      - "${PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    networks:
      - dashboard-network-prod
    restart: unless-stopped
    volumes:
      - ./uploads:/app/uploads:ro  # Només lectura per seguretat
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (opcional)
  nginx:
    image: nginx:alpine
    container_name: dashboard-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # Certificats SSL
    depends_on:
      - app
    networks:
      - dashboard-network-prod
    restart: unless-stopped

volumes:
  postgres_data_prod:
    driver: local

networks:
  dashboard-network-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 